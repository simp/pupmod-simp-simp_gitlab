#!/opt/puppetlabs/puppet/bin/ruby
# Script to change the GitLab 'root' user password
#
# 1. Loads up the gitlab-rails console, which puts the user into an IRB session.
# 2. Finds the root User object and then sets the password using the User object
#    API.
# 3. Writes a marker file to indicate the password has been set.
#
# See https://docs.gitlab.com/ee/security/reset_user_password.html

require 'expect'
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'pty'

class GitlabRootPasswordChanger

  PROGRAM_NAME = File.basename(__FILE__)
  DEFAULT_LOAD_TIMEOUT = 300  # this can take a long time
  DEFAULT_CMD_TIMEOUT = 60    # this should take no time at all
  GITLAB_CTL_EXE = '/bin/gitlab-ctl'
  GITLAB_CONSOLE_EXE = '/bin/gitlab-rails'
  GITLAB_CONSOLE_COMMAND = "#{GITLAB_CONSOLE_EXE} console -e production"
  MARKER_FILE = '/etc/gitlab/.root_password_set'

  def initialize
    @options = OpenStruct.new
    @options.debug = false
    @options.cmd_timeout = DEFAULT_CMD_TIMEOUT
    @options.load_timeout = DEFAULT_LOAD_TIMEOUT
  end

  # write out msg bytes to stdout, when @options.debug=true
  #
  # @param msg Either a String or an Array of Strings returned from the Regex
  #   match in IO.expect()
  def debug(msg)
    if @options.debug
      if msg.is_a?(Array)
        $stdout.write(msg[0])
      else
        $stdout.write(msg)
      end
    end
  end

  # Parse and validate command line options and arguments
  # @param args Array of command line arguments
  def parse_command_line(args)
   all_opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{PROGRAM_NAME} [OPTIONS] PASSWORD"
      opts.separator ''

      opts.on(
        '-t',
        '--load-timeout [TIMEOUT_SECONDS]',
        Integer,
        'Timeout in seconds to wait for',
        'gitlab-rails console to load.',
        "Defaults to #{DEFAULT_LOAD_TIMEOUT} seconds."
      ) do |timeout|
        @options.load_timeout = timeout
      end

      opts.on(
        '-v',
        '--verbose',
        'Print out debug info when processing.'
      ) do
        @options.debug = true
      end

      opts.on(
        '-h',
        '--help',
        'Help Message'
      ) do
        puts opts
        @options.help_requested = true
      end
    end

    all_opts.parse!(args)

    unless @options.help_requested
      fail('ERROR: You must specify the password to set') if (ARGV.length < 1)

      @options.password = ARGV[0]
      fail('ERROR: Password cannot be empty') if @options.password.strip.empty?
    end
  end

  # Parse the command line and the set the root password using the gitlab-rails
  # console
  #
  # @param args Command line arguments
  def run(args)
    parse_command_line(args)
    return 0 if @options.help_requested

    verify_gitlab_running

    debug("Loading gitlab-rails console (this can take some time)...\n")
    debug("\n#{GITLAB_CONSOLE_COMMAND}\n")

    PTY.spawn(GITLAB_CONSOLE_COMMAND) do |console_read,console_write,pid|

      # wait for the initial irb prompt and then get the user object
      console_read.expect(/> /m, @options.load_timeout) { |msg|
        raise("Unable to load console in #{@options.load_timeout} seconds") if msg.nil?

        debug(msg)
        console_write.puts("user = User.where(username: 'root')[0]")
      }

      wait_for_irb_result(console_read)

      # wait for irb prompt and then set the password
      console_read.expect(/> /, @options.cmd_timeout) { |msg|
        raise("Command prompt not found in #{@options.cmd_timeout} seconds") if msg.nil?

        debug(msg)
        console_write.puts("user.password = '#{@options.password}'")
      }

      wait_for_irb_result(console_read)

      # wait for the irb prompt and then set the password confirmation
      console_read.expect(/> /, @options.cmd_timeout) { |msg|
        raise("Command prompt not found in #{@options.cmd_timeout} seconds") if msg.nil?

        debug(msg)
        console_write.puts("user.password_confirmation = '#{@options.password}'")
      }

      wait_for_irb_result(console_read)

      # wait for the irb prompt and then save the password settings
      console_read.expect(/> /, @options.cmd_timeout) { |msg|
        raise("Command prompt not found in #{@options.cmd_timeout} seconds") if msg.nil?

        debug(msg)
        console_write.puts('user.save!')
     }

      wait_for_irb_result(console_read)

      # wait for the irb prompt and then exit the gitlab-rails console
      console_read.expect(/> /, @options.cmd_timeout) { |msg|
        raise("Command prompt not found in #{@options.cmd_timeout} seconds") if msg.nil?

        debug(msg)
        debug("exit\n")
        console_write.puts('exit')
      }
    end

    puts 'GitLab root password set'

    debug("Writing marker file #{MARKER_FILE}\n")
    FileUtils.touch(MARKER_FILE)

    return 0

  rescue Exception => e
    err_msg = "\nFAILED to set GitLab root password"
    err_msg += ":\n#{e.message}" unless e.message.strip.empty?
    warn(err_msg)
    return 1
  end

  # Verifies that the commands and services required
  def verify_gitlab_running
    unless File.exist?(GITLAB_CONSOLE_EXE)
      raise("GitLab is not properly installed: Could not find #{GITLAB_CONSOLE_EXE}.")
    end

    unless File.exist?(GITLAB_CTL_EXE)
      raise("GitLab is not properly installed: Could not find #{GITLAB_CTL_EXE}.")
    end

    # If the postgresql GitLab process is not running, we can't bring up a
    # gitlab-rails console.
    status = `#{GITLAB_CTL_EXE} status`.split("\n")
    pg_status = status.select {|entry| entry.include?('postgresql')}
    exit_code = $?.exitstatus

    unless pg_status.empty?
      if pg_status[0].start_with?('down')
        raise('GitLab postgresql process is not running.')
      end
    end

    # Just in case the GitLab internals change and some other process is essential
    # for the gitlab-rails console, warn if any other GitLab process is not up.
    bad_status = status.select { |entry| entry.start_with?('down') }
    warn("WARNING: GitLab is not completely running:\n#{bad_status.join("\n")}")
  end

  # Wait up to @options.cmd_timeout seconds for the string that indicates
  # the result of the previous IRB command.
  #
  # @param read_io IO stream from which to read the results of the previous
  #   IRB command
  #
  # @raise RuntimeError if the command fails
  def wait_for_irb_result(read_io)
    result = read_io.expect(/\n=>.*\n/m, @options.cmd_timeout)

    if result.nil?
      err_msg = "Valid command response not found in #{@options.cmd_timeout} seconds"

      # Something went wrong. Try to grab the command executed and the
      # exception message.
      bad_result = read_io.expect(/(.*?)\n(.*)\nirb(.*)> /m, @options.cmd_timeout)

      if bad_result
        debug(bad_result[1].strip + "\n") # [1] command that failed
        err_msg += ":\n#{bad_result[2]}"  # [2] error message
      end

      raise(err_msg)
    else
      debug(result)
    end
  end
end

################################################################################

if __FILE__ == $0
  helper = GitlabRootPasswordChanger.new
  exit helper.run(ARGV)
end

