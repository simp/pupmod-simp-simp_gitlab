#!/opt/puppetlabs/puppet/bin/ruby
# Script to change the GitLab 'root' user password
#
# 1. Loads up the gitlab-rails console, which puts the user into an IRB session.
# 2. Finds the root User object and then sets the password using the User object
#    API.
# 3. Writes a marker file to indicate the password has been set.
#
# See https://docs.gitlab.com/ee/security/reset_user_password.html

require 'fileutils'
require 'optparse'
require 'ostruct'
require 'pty'
require 'timeout'

class GitlabRootPasswordChanger

  PROGRAM_NAME = File.basename(__FILE__)
  DEFAULT_LOAD_TIMEOUT = 300  # loading gitlab-rails console can take a long time
  GITLAB_CTL_EXE = '/bin/gitlab-ctl'
  GITLAB_CONSOLE_EXE = '/bin/gitlab-rails'
  GITLAB_CONSOLE_COMMAND = "#{GITLAB_CONSOLE_EXE} console -e production"
  MARKER_FILE = '/etc/gitlab/.root_password_set'

  def initialize
    @options = OpenStruct.new
    @options.debug = false
    @options.load_timeout = DEFAULT_LOAD_TIMEOUT
  end

  # write msg to stdout, when @options.debug=true
  def debug(msg)
    puts msg if @options.debug
  end

  # Parse and validate command line options and arguments
  # @param args Array of command line arguments
  def parse_command_line(args)
   all_opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{PROGRAM_NAME} [OPTIONS] PASSWORD"
      opts.separator ''

      opts.on(
        '-t',
        '--load-timeout [TIMEOUT_SECONDS]',
        Integer,
        'Timeout in seconds to wait for',
        'gitlab-rails console to load',
        'and process the change.',
        "Defaults to #{DEFAULT_LOAD_TIMEOUT} seconds."
      ) do |timeout|
        @options.load_timeout = timeout
      end

      opts.on(
        '-v',
        '--verbose',
        'Print out debug info when processing.'
      ) do
        @options.debug = true
      end

      opts.on(
        '-h',
        '--help',
        'Help Message'
      ) do
        puts opts
        @options.help_requested = true
      end
    end

    all_opts.parse!(args)

    unless @options.help_requested
      fail('ERROR: You must specify the password to set') if (ARGV.length < 1)

      @options.password = ARGV[0]
      fail('ERROR: Password cannot be empty') if @options.password.strip.empty?
    end
  end

  # Parse the command line and the set the root password using the gitlab-rails
  # console
  #
  # @param args Command line arguments
  def run(args)
    parse_command_line(args)
    return 0 if @options.help_requested

    verify_gitlab_running

    # This logic block is fragile, but the best we can do due to limitations
    # of the gitlab-rails console. Here are details for maintainers:
    #
    # - This logic was developed with gitlab-ce-13.7.1, but verified to also work
    #   with gitlab-ce-12.3.0.
    # - The gitlab-rails console uses IRB from the gitlab-provided Ruby.
    #   - IRB will not exit with a bad error code when any command fails. This
    #     means we have to scrape the command output to determine if the
    #     commands succeed.
    #   - When the input is piped to the gitlab-rails console, IRB determines
    #     that the input is not from a TTY, and
    #     * does not emit any prompts, which could have been customized via IRB
    #       configuration
    #     * does not prepend successful command results with '\t=> ' or a
    #       configured string
    #     * does not use ANSI cursor-moving command sequences that provide a more
    #       IDE-like experience; a feature introduced with Ruby 2.7.0.
    #
    #     The suppression of the prompt and result prefix prevents this script from
    #     failing due to user IRB configuration. The suppression of the ANSI
    #     cursor-moving behavior allows easier support of different versions of
    #     GitLab. (See NOTE below).
    #   - Rails allows customization of the application that provides the console,
    #     so it is possible (not necessarily likely) that the console could change
    #     to a non-IRB implementation in a future GitLab release.
    #
    # NOTE:  Previous versions of this script used expect and parsed the
    #   output based on the command prompt and results prefix for each individual
    #   command in gitlab_ruby_commands below. This is no longer viable because of
    #   the ANSI cursor-moving character sequences that Ruby 2.7's IRB uses when a
    #   user enters a command. The cursor-moving sequences are used every time
    #   a user enters a character. For example, the command prompt is modified to
    #   contain a '?' character, when the input does not yet pass Ruby syntax
    #   validation. Even though the final characters displayed on the console
    #   look largely the same as what was displayed in earlier Ruby IRB versions,
    #   this behavior completely changes the characters sequences sent to the
    #   console and gathered by expect.

    debug("Loading gitlab-rails console and executing change (this can take some time)...\n")

    # Password will be wrapped in double quotes within a single-quoted bash string.
    safe_password = @options.password.gsub(/"/,'\\"')
    gitlab_ruby_commands = [
      'user = User.where(username: "root")[0]',
      "user.password = \"#{safe_password}\"",
      "user.password_confirmation = \"#{safe_password}\"",
      'user.save!'
    ].join('; ')

    command = "echo '#{gitlab_ruby_commands}' | #{GITLAB_CONSOLE_COMMAND}"
    debug("Executing: #{command}\n")

    begin
      Timeout::timeout(@options.load_timeout) do
        console_out = `#{command} 2>&1`
        debug(console_out)

        # The last Ruby command executed in the Rails console (`user.save!`)
        # returns true when the valid User record has been saved.  This is true
        # even if you are overwriting the User record with the same information.
        # Any failures in that command or a prior command in the semi-colon
        # separated command list will spew out error messages instead.

        lines = console_out.split("\n").delete_if { |line| line.empty? }

        if lines.last !~ /^true$/
          raise('Password set operation failed.')
        end
      end
    rescue Timeout::Error
      err_msg = "Password set operation timed out after #{@options.load_timeout} seconds."
      raise(err_msg)
    end

    puts 'GitLab root password set'

    debug("Writing marker file #{MARKER_FILE}\n")
    FileUtils.touch(MARKER_FILE)

    return 0

  rescue Exception => e
    err_msg = "\nFAILED to set GitLab root password"
    err_msg += ":\n  #{e.message}" unless e.message.strip.empty?
    err_msg += "\n"

    unless @options.debug
      # don't print out the actual password in this message so it
      # doesn't end up in a Puppet log
      debug_cmd = "#{PROGRAM_NAME} -v -t #{@options.load_timeout} <password>"
      err_msg += "\nRun '#{debug_cmd}' manually to debug"
    end

    warn(err_msg)
    return 1
  end

  # Verifies that the commands and services required
  def verify_gitlab_running
    unless File.exist?(GITLAB_CONSOLE_EXE)
      raise("GitLab is not properly installed: Could not find #{GITLAB_CONSOLE_EXE}.")
    end

    unless File.exist?(GITLAB_CTL_EXE)
      raise("GitLab is not properly installed: Could not find #{GITLAB_CTL_EXE}.")
    end

    # If the postgresql GitLab process is not running, we can't bring up a
    # gitlab-rails console.
    status = `#{GITLAB_CTL_EXE} status`.split("\n")
    pg_status = status.select {|entry| entry.include?('postgresql')}
    exit_code = $?.exitstatus

    unless pg_status.empty?
      if pg_status[0].start_with?('down')
        raise('GitLab postgresql process is not running.')
      end
    end

    # Just in case the GitLab internals change and some other process is essential
    # for the gitlab-rails console, warn if any other GitLab process is not up.
    bad_status = status.select { |entry| entry.start_with?('down') }
    unless bad_status.empty?
      warn("WARNING: GitLab is not completely running:\n#{bad_status.join("\n")}")
    end
  end

end

################################################################################

if __FILE__ == $0
  helper = GitlabRootPasswordChanger.new
  exit helper.run(ARGV)
end

