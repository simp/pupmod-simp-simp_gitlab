# ## Class simp_gitlab::install
#
# This class is called from simp_gitlab to configure & run the GitLab Omnibus
# installer.  It uses the `puppet/gitlab` module to manage the Omnibus config.
#
class simp_gitlab::install {
  assert_private()

  $_http_access_list = epp('simp_gitlab/etc/nginx/http_access_list.conf.epp', {
    'allowed_nets' => $::simp_gitlab::trusted_nets,
    'denied_nets'  => $::simp_gitlab::denied_nets,
    'module_name'  => $module_name,
  })

  # If you need to configure the main NGINX server, you can use a `file`
  # resource to drop a `.conf` file in `/etc/gitlab/nginx/conf.d/`
  # (Parent directory, /etc/gitlab, is managed by the gitlab class.
  file {['/etc/gitlab/nginx', '/etc/gitlab/nginx/conf.d']:
    ensure => directory,
  }

  file { '/etc/gitlab/nginx/conf.d/http_access_list.conf':
    content => $_http_access_list,
    notify  => Class['gitlab::service'],
  }

  # Make sure the standard authorized keys file path is used for the
  # the GitLab local user, not the non-standard path set by SIMP. We
  # do this because ssh configuration managed by GitLab via Chef
  # (including ownership, permissions and selinux context of
  # directory in which ssh authorized keys file exists) cannot be
  # simultaneously, but independently, managed by Puppet.
  sshd_config { 'AuthorizedKeysFile GitLab user':
    ensure    => present,
    key       => 'AuthorizedKeysFile',
    condition => "User ${simp_gitlab::gitlab_ssh_user}",
    value     => $simp_gitlab::gitlab_ssh_keyfile,
    before    => Class['gitlab']
  }

  Sshd_config['AuthorizedKeysFile GitLab user'] ~> Service['sshd']

  class { 'gitlab':
    * => deep_merge(simp_gitlab::omnibus_config::gitlab(), $::simp_gitlab::gitlab_options),
  }

  # The package resource and exec below are explicitly designed to ensure the
  # root GitLab password is set as part of the initial gitlab install (very
  # first reconfigure action). We can't do this with the gitlab module and, in
  # fact, have to painfully work around assumptions built into that module's
  # design to make it happen.  Unfortunately, this makes simp_gitlab highly
  # coupled with the internals of the gitlab module.
  #
  # To set the root password, we need to ensure the gitlab.rb generated by
  # gitlab::omnibus_config is laid down **AFTER** the gitlab-[ce,ee] RPM is
  # installed and that an initial reconfigure with the GITLAB_ROOT_PASSWORD
  # environment variable set is executed.
  #
  # The reason the gitlab.rb/RPM ordering is important is as follows:
  # - The **ONLY** time GITLAB_ROOT_PASSWORD can be used to set the
  #   root password is during the absolutely **FIRST** gitlab reconfigure
  #   operation.
  # - The %posttrans of the gitlab-ce RPM runs `gitlab-ctl upgrade`,
  #   which, if the external_url configuration parameter in gitlab.rb
  #   does not match the dummy value present in the file during a fresh
  #   RPM install ('http://gitlab.example.com'), executes a reconfigure
  #   operation under the hood.
  # So, as the gitlab module is written, it precludes the GitLab root
  # password from being set, unless the environment variable can be
  # set during the package install.
  #
  # Another problem with the gitlab module that we have to work around is
  # that the gitlab::service class is written as if at least 1 reconfigure
  # has been executed.  Specifically, the Exec['gitlab_reconfigure']
  # requires Service['gitlab-runsvdir'], when, in fact the service files
  # for that service are created during the initial gitlab reconfigure.
  #
  if $simp_gitlab::manage_package {
    # This resource intentionally has a different title from the package
    # title used by gitlab::install ('gitlab-omnibus') to aide debugging.
    package { "gitlab-${simp_gitlab::edition}":
      ensure  => $simp_gitlab::package_ensure,
      require => Class['gitlab::omnibus_package_repository'],
      before  => Class['gitlab::omnibus_config'],
      notify  => Exec['initial_gitlab_reconfigure'],
    }

    exec { 'initial_gitlab_reconfigure':
      command     => '/usr/bin/gitlab-ctl reconfigure',
      environment => [ "GITLAB_ROOT_PASSWORD=${simp_gitlab::gitlab_root_passwd}" ],
      logoutput   => true,
      # If gitlab-runsvdir service file is not present, initial gitlab
      # reconfigure has not been executed.  That file is create by Chef.
      onlyif      => '/usr/bin/test ! -e /usr/lib/systemd/system/gitlab-runsvdir.service',
      refreshonly => true,
      timeout     => 1800,
      tries       => 5,
    }

    Class['gitlab::omnibus_config'] -> Exec['initial_gitlab_reconfigure'] -> Class['gitlab::service']
  }
}
