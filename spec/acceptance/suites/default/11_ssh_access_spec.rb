require 'spec_helper_acceptance'
require 'helpers/curl_ssl_cmd'
require 'json'

# place to store global values needed in different `it` blocks
# (Instance variables can't be used and rspec spews out nasty
# message when class variables are used...)
values_to_share = {}

describe 'gitlab ssh access' do

  # This test is to verify that an authorized GitLab user can access
  # GitLab via ssh.  It uses the GitLab server and an LDAP account set
  # up in 10_ldaps_spec.rb

  context 'set up ssh and create empty project for authorized user' do
    # We need an oauth token for root in order to modify a user's account
    # via the REST API.
    it 'should create oauth token for root' do
      # From https://docs.gitlab.com/ee/api/oauth2.html#resource-owner-password-credentials
      # We can do this because
      # (1) We have not turned on two-factor authentication for the
      #     GitLab root user
      # (2) We are in a totally trusted environment.
      #
      # WARNING: DON'T EVER DO THIS ON A REAL SYSTEM.  This is NOT secure.
      #
      # GitLab root password was generated by simplib::passgen
      domain = fact_on(gitlab_server, 'domain')
      result = on(gitlab_server, "cat /opt/puppetlabs/puppet/cache/simp/environments/production/simp_autofiles/gen_passwd/simp_gitlab_server.#{domain}")
      gitlab_root_pw = result.stdout.chomp
      json = "{\"grant_type\": \"password\", \"username\": \"root\", \"password\": \"#{gitlab_root_pw}\"}"
      args = [
        curl_ssl_cmd(permitted_client),
        "https://#{gitlab_server.node_name}/oauth/token",
        '--request POST',
        "--header 'Content-Type: application/json'",
        "--data '" + json + "'"
      ]
      result = on(permitted_client, args.join(' '), :acceptable_exit_codes => [0,2])
      token_data = JSON.parse(result.stdout)
      values_to_share[:access_token] = token_data.fetch('access_token')
      # store on host system for debugging
      create_remote_file(permitted_client, '/root/root_oauth_token', values_to_share[:access_token])
    end

    # LDAP GitLab users are not actually Linux users in this system. For simplicity,
    # we are going to have the existing Linux vagrant user use the ldapuser1 GitLab
    # account.  However before we can upload ssh keys for this to happen, we first
    # need to retrieve the GitLab id of ldapuser1.
    it 'should allow retrieval of GitLab user info' do
      args = [
        curl_ssl_cmd(permitted_client),
        "https://#{gitlab_server.node_name}/api/v4/users?username=ldapuser1",
        "--header 'Authorization: Bearer #{values_to_share[:access_token]}'",
        "--header 'Content-Type: application/json'"
      ]
      result = on(permitted_client, args.join(' '), :acceptable_exit_codes => [0,2])
      user_data = JSON.parse(result.stdout)
      values_to_share[:ldapuser1_id] = user_data[0].fetch('id')
    end

    it "should allow user's ssh keys to be uploaded" do
      # generate dev ssh key for vagrant (no-password key ONLY because this is a test)
      on(permitted_client, "ssh-keygen -t rsa -b 4096 -f /home/vagrant/.ssh/id_rsa -N ''")
      pub_key = on(permitted_client, 'cat /home/vagrant/.ssh/id_rsa.pub').stdout.strip
      on(permitted_client, 'chown vagrant:vagrant /home/vagrant/.ssh/*')

      # upload vagrant's dev ssh public key to ldapuser1 GitLab account
      # https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user
      json = "{\"id\": #{values_to_share[:ldapuser1_id]}, \"title\": \"ssh access test key\", \"key\": \"#{pub_key}\" }"
      args = [
        curl_ssl_cmd(permitted_client),
        "https://#{gitlab_server.node_name}/api/v4/users/#{values_to_share[:ldapuser1_id]}/keys",
        '--request POST',
        "--header 'Authorization: Bearer #{values_to_share[:access_token]}'",
        "--header 'Content-Type: application/json'",
        "--data '" + json + "'"
      ]
      result = on(permitted_client, args.join(' '), :acceptable_exit_codes => [0,2])
    end

    it 'should allow user to create GitLab project' do
      # create a project for ldapuser1
      # https://docs.gitlab.com/ee/api/projects.html#create-project-for-user
      json = "{\"id\": #{values_to_share[:ldapuser1_id]}, \"name\": \"test_project\" }"
      args = [
        curl_ssl_cmd(permitted_client),
        "https://#{gitlab_server.node_name}/api/v4/projects/user/#{values_to_share[:ldapuser1_id]}",
        '--request POST',
        "--header \"Authorization: Bearer #{values_to_share[:access_token]}\"",
        '--header \'Content-Type: application/json\'',
        "--data '" + json + "'"
      ]
      result = on(permitted_client, args.join(' '), :acceptable_exit_codes => [0,2])
    end
  end

  context 'user ssh GitLab access' do
    it 'should allow user to clone via ssh' do
      # start ssh-agent, add vagrant's dev key to it, and add GitLab host key to
      # vagrant's known_hosts file
      ssh_env = '/home/vagrant/.ssh/environment'
      on(permitted_client, "su -l vagrant -c '/usr/bin/ssh-agent | sed \'s/^echo/#echo/\'' > #{ssh_env} ")
      on(permitted_client, "su -l vagrant -c 'source #{ssh_env}; /usr/bin/ssh-add'")
      # this is expected to fail, but we get the GitLab host key added to
      # the known_hosts file in the process
      on(permitted_client, "su -l vagrant -c 'ssh -oStrictHostKeyChecking=no #{gitlab_server.node_name} ls'",
        :accept_all_exit_codes => true)


      # set up git and use to clone ldapuser1's GitLab repo
      install_package(permitted_client, 'git')
      on(permitted_client, "su -l vagrant -c 'git config --global user.name \"ldapuser1\"'")
      on(permitted_client, "su -l vagrant -c 'git config --global user.email \"ldapusr1@someurl.tld\"'")
      on(permitted_client, "su -l vagrant -c 'git clone git@#{gitlab_server.node_name}:ldapuser1/test_project.git'")
      on(permitted_client, 'ls -al /home/vagrant/test_project')
    end
  end

end
